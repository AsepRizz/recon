import os
import requests
import subprocess
from rich.console import Console
from modules.utils import *

console = Console()

def shodan_lookup(query):
    """Mencari informasi perangkat menggunakan Shodan"""
    SHODAN_API_KEY = os.getenv("SHODAN_API_KEY")
    if not SHODAN_API_KEY:
        console.print("[red]Shodan API key not set! Set SHODAN_API_KEY environment variable.[/red]")
        return
    
    console.print(f"[yellow]‚è≥ Searching Shodan for: [bold]{query}[/bold]...[/yellow]")
    url = f"https://api.shodan.io/shodan/host/search?key={SHODAN_API_KEY}&query={query}"
    
    try:
        response = requests.get(url)
        data = response.json()
        
        if 'matches' in data:
            table = Table(title="Shodan Results")
            table.add_column("IP")
            table.add_column("Port")
            table.add_column("Organization")
            table.add_column("Hostnames")
            
            for match in data['matches']:
                ip = match['ip_str']
                port = match['port']
                org = match.get('org', 'N/A')
                hostnames = ", ".join(match.get('hostnames', []))
                table.add_row(ip, str(port), org, hostnames)
            
            console.print(table)
            telegram_msg = f"<b>üåê SHODAN RESULTS FOR {query}</b>\nFound {len(data['matches']} results."
            send_to_telegram(telegram_msg)
            generate_html_report_section(query, "Shodan Lookup", table)
        else:
            console.print("[red]No results found[/red]")
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]")

def exploitdb_search(query):
    """Mencari exploit di Exploit Database"""
    if not ensure_tool("searchsploit", "sudo apt install exploitdb -y"):
        return
    
    console.print(f"[yellow]‚è≥ Searching ExploitDB for: [bold]{query}[/bold]...[/yellow]")
    output_file = f"exploitdb_{query}.txt"
    command = ["searchsploit", query, "-w", "--exclude", "DoS", "-j"]
    
    try:
        with open(output_file, 'w') as f:
            process = subprocess.Popen(command, stdout=f, stderr=subprocess.PIPE, text=True)
            process.communicate(timeout=300)
        
        if os.path.exists(output_file):
            with open(output_file, 'r') as f:
                output = f.read()
            
            try:
                data = json.loads(output)
                if 'RESULTS_EXPLOIT' in data and data['RESULTS_EXPLOIT']:
                    table = Table(title="ExploitDB Results")
                    table.add_column("Title")
                    table.add_column("URL")
                    
                    for exploit in data['RESULTS_EXPLOIT']:
                        table.add_row(exploit['Title'], exploit['URL'])
                    
                    console.print(table)
                    telegram_msg = f"<b>üí£ EXPLOITDB RESULTS FOR {query}</b>\nFound {len(data['RESULTS_EXPLOIT'])} exploits"
                    send_to_telegram(telegram_msg)
                    generate_html_report_section(query, "ExploitDB Search", table)
                else:
                    console.print("[yellow]No exploits found[/yellow]")
            except json.JSONDecodeError:
                console.print(output)
    except Exception as e:
        console.print(f"[red]Error: {str(e)}[/red]")

# Fungsi exploit lainnya (CVE Scanner, Reverse Shell Generator) akan didefinisikan di sini...